struct Node {
    value,
    next,
}

struct List {
    first,
    last,
}

impl List {
    fn new() {
        List {
            first: (),
            last: (),
        }
    }
    
    fn iter(self) {
        Iter {
            current: self.first,
        }
    }

    fn push_back(self, value) {
        let prev = self.last;

        self.last = Node {
            value,
            next: (),
        };

        if prev is unit {
            self.first = self.last;
        } else {
            prev.next = self.last;
        }
    }
}

struct Iter {
    current,
}

impl Iter {
    fn next(self) {
        let value = self.current;

        if value is unit {
            None
        } else {
            self.current = value.next;
            Some(value.value)
        }
    }
}

fn main() {
    let ll = List::new();
    ll.push_back(1);
    ll.push_back(2);
    ll.push_back(3);

    let it = ll.iter();

    while let Some(value) = it.next() {
        println(`{value}`);
    }
}